# -*- coding: utf-8 -*-
"""Eigensystem_Calculation.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/16otuptAD5RhoZ_NNBeZ6cczL0MozuK6P

# Eigensystem Calculation and Plotting
"""

import numpy as np
import matplotlib.pyplot as plt

# Parameters
N = 2000  # Number of grid points
x_max = 10 # Maximum x value (adjust as needed)
dx = 2 * x_max / N
x = np.linspace(-x_max, x_max, N)

# Physical constants (can be set to 1 for simplicity)
hbar, m, omega = 1, 1, 1

# Set figure parameters for all plots
newParams = {'figure.figsize'  : (12, 6),  # Figure size
             'figure.dpi'      : 200,      # figure resolution
             'axes.titlesize'  : 20,       # fontsize of title
             'axes.labelsize'  : 11,       # fontsize of axes labels
             'axes.linewidth'  : 2,        # width of the figure box lines
             'lines.linewidth' : 2,        # width of the plotted lines
             'savefig.dpi'     : 200,      # resolution of a figured saved using plt.savefig(filename)
             'ytick.labelsize' : 11,       # fontsize of tick labels on y axis
             'xtick.labelsize' : 11,       # fontsize of tick labels on x axis
             'legend.fontsize' : 12,       # fontsize of labels in legend
             'legend.frameon'  : True,     # activate frame on lengend
            }
plt.rcParams.update(newParams) # Set new plotting parameters

# Create potentials

# Simple harmonic oscillator
V_SHO=0.5*x**2*(omega**2)*m

# Infinite square well
V_inf_sq_well=np.zeros(N)

def create_hamiltonian(V):
    c = hbar ** 2 / (2 * m * dx ** 2)
    hamiltonian = np.zeros((N, N))
    for i in range(1, N - 1):
      hamiltonian[i, i] = 2 * c + V[i]
      hamiltonian[i, i + 1] = -c
      hamiltonian[i, i - 1] = -c

    # Set Dirichlet Boundary Conditions
    hamiltonian[0, 0] = 1e30
    hamiltonian[-1, -1] = 1e30
    return hamiltonian

def eigensystem_sorted(eigenvalues, eigenvectors):
    idx = eigenvalues.argsort()
    eigenvalues = eigenvalues[idx]
    eigenvectors = eigenvectors[:, idx]
    return eigenvalues, eigenvectors

def plot_eigenfunction(eigenvalues, eigenvectors, max_energy, title):
    fig=plt.figure()
    for i in range(max_energy):
        plt.plot(x, eigenvectors[:, i], label=f'$E_{i}$ = {eigenvalues[i]:.3f}')
    plt.xlabel('x')
    plt.ylabel(r'$\psi(x)$')
    plt.title(title)
    plt.legend()
    plt.grid(True)

H=create_hamiltonian(V_SHO)

# Solve for eigenvalues and eigenvectors and sort
eigenvalues, eigenvectors = np.linalg.eig(H)
inf_sq_well=eigensystem_sorted(eigenvalues, eigenvectors)

plot_eigenfunction(inf_sq_well[0], inf_sq_well[1], 4, 'Infinite Square Well Eigenfunctions')
plt.show()
